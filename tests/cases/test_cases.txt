# Extended test suite for FSA Engine
# Tests various regex patterns and edge cases

# ===== Basic Patterns =====

[Basic_EndsWith1]
regex = (0|1)*1
input = 0101
expected = true

[Basic_EndsWith0]
regex = (0|1)*0
input = 0100
expected = true

[Basic_EndsWithTwo1s]
regex = (0|1)*11
input = 01011
expected = true

[Basic_EndsWithTwo0s]
regex = (0|1)*00
input = 01100
expected = true

# ===== Simple Literals =====

[Literal_ExactMatch]
regex = 0101
input = 0101
expected = true

[Literal_NoMatch]
regex = 0101
input = 0100
expected = false

[Literal_PartialMatch]
regex = 0101
input = 01010
expected = false

# ===== Kleene Star Tests =====

[Star_EmptyString]
regex = (0|1)*
input = 
expected = true

[Star_RepeatedBits]
regex = 1*0*
input = 11110000
expected = true

[Star_MixedOrder]
regex = 1*0*
input = 11001100
expected = false

# ===== Alternation Tests =====

[Alt_SingleChar]
regex = 0|1
input = 0
expected = true

[Alt_NestedGroups]
regex = (00|11)(01|10)
input = 0010
expected = true

[Alt_Mixed]
regex = (00|11)(01|10)
input = 1101
expected = true

[Alt_Invalid]
regex = (00|11)(01|10)
input = 0000
expected = false

# ===== Length-Based Patterns =====

[Length_Even]
# Even length strings
regex = (01|10|00|11)(01|10|00|11)*
input = 0101
expected = true

[Length_Odd]
# Odd length strings (impossible with paired bits)
regex = (01|10|00|11)(01|10|00|11)*
input = 010
expected = false

[Length_Mod3]
# Length is multiple of 3
regex = ((0|1)(0|1)(0|1))*
input = 010101
expected = true

[Length_NotMod3]
regex = ((0|1)(0|1)(0|1))*
input = 0101
expected = false

# ===== Position-Based Patterns =====

[Position_StartsWith1]
regex = 1(0|1)*
input = 1010
expected = true

[Position_StartsWith0]
regex = 0(0|1)*
input = 0010
expected = true

[Position_StartsAndEnds]
regex = 1(0|1)*1
input = 1001
expected = true

# ===== Pattern Combinations =====

[Combo_StartEnd]
regex = 1(0|1)*0
input = 10110
expected = true

[Combo_NoMiddle0]
regex = 1[^0]*1
input = 1111
expected = true

[Combo_ThreeConsecutive1s]
regex = (0|1)*111(0|1)*
input = 0111010
expected = true

[Combo_No3Consecutive1s]
regex = (0|(10)|(110))*
input = 01101010
expected = true

# ===== Edge Cases =====

[Edge_SingleChar]
regex = 0
input = 0
expected = true

[Edge_EmptyString]
regex = 
input = 
expected = true

[Edge_LongString]
regex = (0|1)*
input = 0101010101010101010101010101010101010101
expected = true

[Edge_ZeroOnes]
regex = 0*1*
input = 000111
expected = true

# ===== Special Patterns =====

[Special_ContainsSubstring]
# Contains '101'
regex = (0|1)*101(0|1)*
input = 0010100
expected = true

[Special_NoContainsSubstring]
regex = (0|1)*101(0|1)*
input = 001100
expected = false

[Special_DivisibleBy3]
# Number represented in binary is divisible by 3
# (Simplified: just check if binary ends with 00 or 11)
regex = (0|1)*(00|11)
input = 1100
expected = true

[Special_AlternatingBits]
# Alternating 0s and 1s
regex = (01)*(0)?|(10)*(1)?
input = 010101
expected = true

[Special_NotAlternating]
regex = (01)*(0)?|(10)*(1)?
input = 01100
expected = false

# ===== NEW: Advanced Regex Features =====

[Adv_OptionalElement]
regex = 10?1
input = 101
expected = true

[Adv_OptionalElement2]
regex = 10?1
input = 11
expected = true

[Adv_OptionalElement3]
regex = 10?1
input = 100
expected = false

[Adv_Repetition]
regex = 1{3}
input = 111
expected = true

[Adv_RepetitionFail]
regex = 1{3}
input = 11
expected = false

[Adv_RepetitionGroup]
regex = (01){2}
input = 0101
expected = true

[Adv_NestedGroups]
regex = ((01){2}0)*
input = 01010
expected = true

# ===== NEW: Negation Patterns =====

[Neg_NoZeros]
regex = 1*
input = 111
expected = true

[Neg_NoZerosFail]
regex = 1*
input = 1101
expected = false

[Neg_NegatedClass]
regex = 0[^0]*0
input = 01110
expected = true

[Neg_DoubleNegation]
regex = 1[^0]*[^1]*0
input = 11110
expected = true

# ===== NEW: Complex Combinations =====

[Complex_Even1s]
# Binary strings with even number of 1s
regex = (0*(10*10*))*
input = 00100100
expected = true

[Complex_Even1sFail]
regex = (0*(10*10*))*
input = 0010010
expected = true

[Complex_DivisibleBy4]
# Binary string representing number divisible by 4 (ends with 00)
regex = (0|1)*00
input = 10100
expected = true

[Complex_MultOf3]
# Matches binary strings that are multiples of 3
regex = (0|(1(01*0)*1))*
input = 110
expected = true

[Complex_NotMultOf3]
regex = (0|(1(01*0)*1))*
input = 10
expected = false

[Complex_Palindrome4]
# Binary palindromes of length 4
regex = (00|11)(00|11)|(01|10)(10|01)
input = 1001
expected = true

[Complex_Palindrome4Fail]
regex = (00|11)(00|11)|(01|10)(10|01)
input = 1011
expected = false

[Complex_NoConsecutive1]
# No consecutive 1s
regex = (0|10)*1?
input = 010101
expected = true

[Complex_NoConsecutive1Fail]
regex = (0|10)*1?
input = 0110
expected = false

# ===== NEW: Extra Tests =====

[Extra_RepeatedPattern]
regex = (01){3}
input = 010101
expected = true

[Extra_MismatchTest]
regex = (0|1)+
input = 
expected = false

# ===== NEW: Complex and Edge Cases II =====

[Complex_LongPattern]
regex = (01){10}
input = 01010101010101010101
expected = true

[Complex_MixedGroups2]
regex = ((0|1)+)?(1{2,3}(0*))
input = 11000
expected = true